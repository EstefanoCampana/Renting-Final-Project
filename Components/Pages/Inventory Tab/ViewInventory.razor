@page "/viewInv"
@inject NavigationManager NavManager

<div class="d-flex justify-content-between align-items-center mb-4">
    <button class="btn btn-info" @onclick="GoBack">← Back</button>

    <h2 class="fw-bold text-center flex-grow-1 m-0">Inventory</h2>

    <div style="width: 100px;"></div>
</div>

<div class="page-controls">
    <div class="header-controls">
        <div></div>
        <div class="search-sort">
            <div @onclick="() => unused = !unused">Broken Items</div>
        </div>
    </div>

    <div class="grid-container">
        @if (unused)
        {
            @foreach (ItemModel item in brokenItems)
            {
                <div class="card" @onclick="() => SetSelected(item.Id)">
                    <div class="card-image">
                        @if (!string.IsNullOrEmpty(item.ImageBase64))
                        {
                            <img src="data:image/png;base64,@item.ImageBase64" alt="Preview" />
                        }
                    </div>
                    <div class="card-label">@item.Title</div>
                </div>
            }
        }
        else
        {
            @foreach (ItemModel item in items)
            {
                <div class="card" @onclick="() => SetSelected(item.Id)">
                    <div class="card-image">
                        @if (!string.IsNullOrEmpty(item.ImageBase64))
                        {
                            <img src="data:image/png;base64,@item.ImageBase64" alt="Preview" />
                        }
                    </div>
                    <div class="card-label">@item.Title</div>
                </div>
            }
        }
    </div>
</div>

@if (showInfo)
{
    <div class="popup-overlay" @onclick="() => showInfo = false"></div>

    <div class="d-flex justify-content-center">
        <div class="popup-content">
            <div class="popup-inner">
                <div class="popup-left">
                    <div @onclick="PickImage" class="preview-box">
                        @if (!string.IsNullOrEmpty(itemModel.ImageBase64))
                        {
                            <img src="data:image/png;base64,@itemModel.ImageBase64" alt="Preview" />
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="currentColor" class="bi bi-file-plus" viewBox="0 0 16 16">
                                <path d="M8.5 6a.5.5 0 0 0-1 0v1.5H6a.5.5 0 0 0 0 1h1.5V10a.5.5 0 0 0 1 0V8.5H10a.5.5 0 0 0 0-1H8.5z" />
                                <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1" />
                            </svg>
                        }
                    </div>
                    <p class="popup-caption">@itemModel.Title</p>
                </div>
                <div class="popup-right">
                    <label>Name</label>
                    <input class="popup-input" readonly value="@itemModel.Title" />

                    <label>Description</label>
                    <input class="popup-input" readonly value="@itemModel.Description" />

                    <label>Category</label>
                    <input class="popup-input" readonly value="@itemModel.Category" />

                    <label>Daily Rental Cost</label>
                    <input class="popup-input" readonly value="@itemModel.Cost" />

                    <div class="text-center mt-3">
                        <button class="popup-close" @onclick="() => DeleteHandler()">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@if (delete)
{
    <div class="d-flex justify-content-center">
        <div class="popup-content">
            <div class="popup-inner">
                <div class="popup-left">
                    <div class="preview-box">
                        @if (!string.IsNullOrEmpty(itemModel.ImageBase64))
                        {
                            <img src="data:image/png;base64,@itemModel.ImageBase64" alt="Preview" />
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="currentColor" class="bi bi-file-plus" viewBox="0 0 16 16">
                                <path d="M8.5 6a.5.5 0 0 0-1 0v1.5H6a.5.5 0 0 0 0 1h1.5V10a.5.5 0 0 0 1 0V8.5H10a.5.5 0 0 0 0-1H8.5z" />
                                <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1" />
                            </svg>
                        }
                    </div>
                    <p class="popup-caption">@itemModel.Title</p>
                </div>
                <div class="popup-right">
                    <label>Name</label>
                    <input class="popup-input" readonly value="@itemModel.Title" />

                    <label>Status</label>
                    <InputSelect class="popup-input" @bind-Value="itemModel.Status">
                        <option value="" disabled selected>Select a category</option>
                        <option value="On Maintenance">On Maintenance</option>
                        <option value="Broken">Broken</option>
                    </InputSelect>

                    <div class="text-center mt-3">
                        <button class="popup-close" @onclick="() => DeleteItem()">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    private void GoBack()
    {
        NavManager.NavigateTo("/inventory");
    }

    private bool showInfo = false;
    private bool delete = false;
    private bool unused = false;

    private ItemModel itemModel { get; set; } = new ItemModel();
    private List<ItemModel> items = ItemModelManager.GetItems();
    private List<string> categories = ItemModelManager.GetCategories();
    private List<ItemModel> brokenItems = ItemModelManager.GetBrokenItems();
    private string selected = null!;

    void SetSelected(string value)
    {
        showInfo = true;
        if (unused)
        {
            var res = brokenItems.Find(e => e.Id == value);
            if (res != null)
            {
                itemModel = res;
            }
            selected = value;
        }
        else
        {
            var res = items.Find(e => e.Id == value);
            if (res != null)
            {
                itemModel = res;
            }
            selected = value;
        }

    }

    private async Task PickImage()
    {
        try
        {
            FileResult file = await FilePicker.PickAsync(new PickOptions
                {
                    PickerTitle = "Select an image",
                    FileTypes = FilePickerFileType.Images
                });

            if (file != null)
            {
                using Stream stream = await file.OpenReadAsync();
                using MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                byte[] imageBytes = ms.ToArray();

                // Store in base64 (for preview or saving later)
                itemModel.ImageBase64 = Convert.ToBase64String(imageBytes);
            }
        }
        catch (Exception ex)
        {
            ItemModelManager.errorMessage = $"Image upload failed: {ex.Message}";
        }
    }

    public async Task DeleteHandler()
    {
        string message = $"Item has been deleted succesfully.";
        try
        {
            var result = await App.Current.MainPage.DisplayAlert("Are you sure?", "This cannot be reverted.", "OK", "Cancel");
            if (result == true)
            {
                delete = true;
            }
            else
            {
                return;
            }
            if(delete == true)
            {
                showInfo = false;
            }
        }
        catch (Exception ex)
        {
            ItemModelManager.errorMessage = ex.Message;
        }
    }

    public async Task DeleteItem()
    {
        if (String.IsNullOrEmpty(itemModel.Status))
        {
            ItemModelManager.errorMessage = "Please provide the equipment's state.";
        }
        else
        {
            var newItem = new ItemModel
                {
                    Id = itemModel.Id,
                    Title = itemModel.Title,
                    Category = itemModel.Category,
                    Cost = itemModel.Cost,
                    Description = itemModel.Description,
                    ImageBase64 = itemModel.ImageBase64,
                    Status = itemModel.Status
                };

            brokenItems.Add(newItem);
            ItemModelManager.DeleteItem(newItem);
            ItemModelManager.AddBrokenItem(brokenItems);
            await App.Current.MainPage.DisplayAlert("Success", "The item has been succesfully deleted.", "OK");
            delete = false;
            return;
        }

    }
}
