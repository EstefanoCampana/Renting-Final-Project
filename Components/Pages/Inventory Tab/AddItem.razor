@page "/addItem"

<div class="d-flex justify-content-between">
    <div class="image-pick">
        <p>Equipment Preview</p>
    </div>
    <div class="image-pick">
        <EditForm Model="@itemModel">
            <div class="form-group mb-3">
                <label for="title">Title</label>
                <InputText id="title" class="form-control" @bind-Value="itemModel.Title" />
            </div>

            <div class="form-group mb-3">
                <label for="category">Category </label>
                <InputSelect class="form-select" @bind-Value="itemModel.Category">
                    @foreach (string category in ItemModelManager.categories)
                    {
                        <option value=@category>@category</option>
                    }
                    <option>Any...</option>
                </InputSelect>
                <button class="btn-primary" @onclick="() => AddCategory()">Add Category</button>
            </div>

            <div class="form-group mb-3">
                <label for="description">Description (Up to 100 characters)</label>
                <InputTextArea class="form-control" maxlength="100" @bind-Value="itemModel.Description" />
            </div>

            <div class="form-group my-4">
                <label for="cost">Cost</label>
                <InputNumber id="cost" class="form-control" @bind-Value="itemModel.Cost" />
            </div>

            <div class="text-center">
                <button @onclick="() => AddsItem()" class="btn btn-primary mb-3">Add Item</button>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(ItemModelManager.errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ItemModelManager.errorMessage
    </div>
}

@code {
    private ItemModel itemModel { get; set; } = new ItemModel();
    private ItemModelManager itemManager = new ItemModelManager();
    private List<ItemModel> items = ItemModelManager.items;

    public async Task AddsItem()
    {
        string message = $"Item has been saved succesfully.";
        try
        {
            if (String.IsNullOrEmpty(itemModel.Title))
            {
                ItemModelManager.errorMessage = "Please fill all entries";
            }
            else
            {
                ItemModelManager.errorMessage = "";
                ItemModelManager.items.Add(itemModel);
                ItemModelManager.AddItem();
                await App.Current.MainPage.DisplayAlert("Success", $"{message}", "OK");
            }
        }
        catch (Exception ex)
        {
            ItemModelManager.errorMessage = ex.Message;
        }
    }

    public async Task AddCategory()
    {

        try
        {
            string result = await App.Current.MainPage.DisplayPromptAsync("Add Category", "Name of the Category", "OK", "Cancel", "Any Category", 20);
            if (result == null)
            {
                await App.Current.MainPage.DisplayAlert("Exception", "Category cannot be null!", "OK");
                return;

            }
            else
            {
                ItemModelManager.categories.Add(result);
                return;
            }
            ItemModelManager.errorMessage = "";
        }
        catch (Exception ex)
        {
            ItemModelManager.errorMessage = ex.Message;
        }
    }

}
