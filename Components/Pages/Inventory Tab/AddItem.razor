@page "/addItem"

<div class="d-flex justify-content-between">
    <div class="preview-container">
        <div @onclick="PickImage" class="preview-box">
            <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="currentColor" class="bi bi-file-plus" viewBox="0 0 16 16">
                <path d="M8.5 6a.5.5 0 0 0-1 0v1.5H6a.5.5 0 0 0 0 1h1.5V10a.5.5 0 0 0 1 0V8.5H10a.5.5 0 0 0 0-1H8.5z" />
                <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2zm10-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1" />
            </svg>
            @if (!string.IsNullOrEmpty(itemModel.ImageBase64))
            {
                <img src="data:image/png;base64,@itemModel.ImageBase64" alt="Preview" />
            }
        </div>
        <p>Equipment Preview</p>
    </div>
    <div class="form-container">
        <EditForm Model="@itemModel">
            <div class="form-group mb-3">
                <label for="title">Title</label>
                <InputText id="title" class="form-control" @bind-Value="itemModel.Title" />
            </div>
            <label for="category">Category </label>
            <div class="d-flex flex-nowrap form-group mb-3">
                <InputSelect class="form-select" @bind-Value="itemModel.Category">
                    <option value="" disabled selected>Select a category</option>
                    @foreach (string category in categories)
                    {
                        <option value=@category>@category</option>
                    }
                </InputSelect>
                <button class="text-dark btn-primary" @onclick="() => AddCategory()">Add Category</button>
            </div>

            <div class="form-group mb-3">
                <label for="description">Description (Up to 100 characters)</label>
                <InputTextArea class="form-control" maxlength="100" @bind-Value="itemModel.Description" />
            </div>

            <div class="form-group my-4">
                <label for="cost">Cost</label>
                <InputNumber id="cost" class="form-control" @bind-Value="itemModel.Cost" />
            </div>

            <div class="text-center">
                <button @onclick="() => AddsItem()" class="btn btn-primary mb-3">Add Item</button>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(ItemModelManager.errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ItemModelManager.errorMessage
    </div>
}

@code {
    private ItemModel itemModel { get; set; } = new ItemModel();
    private List<ItemModel> items = ItemModelManager.GetItems();
    private List<string> categories = ItemModelManager.GetCategories();

    private async Task PickImage()
    {
        try
        {
            FileResult file = await FilePicker.PickAsync(new PickOptions
                {
                    PickerTitle = "Select an image",
                    FileTypes = FilePickerFileType.Images
                });

            if (file != null)
            {
                using Stream stream = await file.OpenReadAsync();
                using MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                byte[] imageBytes = ms.ToArray();

                // Store in base64 (for preview or saving later)
                itemModel.ImageBase64 = Convert.ToBase64String(imageBytes);
            }
        }
        catch (Exception ex)
        {
            ItemModelManager.errorMessage = $"Image upload failed: {ex.Message}";
        }
    }
    public async Task AddsItem()
    {
        string message = $"Item has been saved successfully.";
        try
        {
            if (string.IsNullOrEmpty(itemModel.Title))
            {
                ItemModelManager.errorMessage = "Please fill all entries";
            }
            else
            {
                ItemModelManager.errorMessage = "";

                var newItem = new ItemModel
                    {
                        Id = items.Count <= 1 ? "1" : (items.Count + 1).ToString(),
                        Title = itemModel.Title,
                        Category = itemModel.Category,
                        Cost = itemModel.Cost,
                        Description = itemModel.Description,
                        ImageBase64 = itemModel.ImageBase64,
                        Status = "Active"
                    };

                items.Add(newItem);
                ItemModelManager.AddItem(items);

                await App.Current.MainPage.DisplayAlert("Success", message, "OK");

                itemModel = new ItemModel(); // reset form
            }
        }
        catch (Exception ex)
        {
            ItemModelManager.errorMessage = ex.Message;
        }
    }

    public async Task AddCategory()
    {

        try
        {
            string result = await App.Current.MainPage.DisplayPromptAsync("Add Category", "Name of the Category", "OK", "Cancel", "Any Category", 20);
            if (result == null)
            {
                await App.Current.MainPage.DisplayAlert("Exception", "Category cannot be null!", "OK");
                return;

            }
            else
            {
                categories.Add(result);
                return;
            }
            ItemModelManager.errorMessage = "";
        }
        catch (Exception ex)
        {
            ItemModelManager.errorMessage = ex.Message;
        }
    }

}
