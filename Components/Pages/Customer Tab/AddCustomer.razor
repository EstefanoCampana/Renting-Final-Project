@page "/addCustomer"
@using Renting.Models
@inject NavigationManager NavManager

<div class="d-flex justify-content-between align-items-center mb-4">

    <button class="btn btn-info" @onclick="GoBack">← Back</button>

    <h2 class="fw-bold text-center flex-grow-1 m-0">Customer Registration</h2>

    <div style="width: 100px;"></div>
</div>

<div class="border p-4 rounded shadow-sm bg-light">
    <EditForm Model="customer" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label text-center w-100">First Name</label>
                <InputText @bind-Value="customer.FirstName" class="form-control" />
                <ValidationMessage For="@(() => customer.FirstName)" />
            </div>
            <div class="col-md-6">
                <label class="form-label text-center w-100">Last Name</label>
                <InputText @bind-Value="customer.LastName" class="form-control" />
                <ValidationMessage For="@(() => customer.LastName)" />
            </div>
        </div>

        <div class="form-group mb-3">
            <label class="form-label text-center w-100">Contact Number</label>
            <InputText @bind-Value="customer.ContactNumber" class="form-control" />
            <ValidationMessage For="@(() => customer.ContactNumber)" />
        </div>

        <div class="form-group mb-3">
            <label class="form-label text-center w-100">Email</label>
            <InputText @bind-Value="customer.Email" class="form-control" />
            <ValidationMessage For="@(() => customer.Email)" />
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary">Add Customer</button>
        </div>
    </EditForm>
</div>

@code {
    private Customer customer = new();

    private void HandleValidSubmit()
    {
        var rand = new Random();
        int generatedId;
        do
        {
            generatedId = rand.Next(1000, 9999);
        } while (CustomerStorage.Customers.Any(c => c.CustomerId == generatedId));

        customer.CustomerId = generatedId;
        CustomerStorage.Customers.Add(customer);

        customer = new();
        NavManager.NavigateTo("/customerList");
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/customerMain"); // change path if needed
    }
}